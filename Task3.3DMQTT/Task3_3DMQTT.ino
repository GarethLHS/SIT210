/* 
  Sketch generated by the Arduino IoT Cloud Thing "Cloud Blink"
  
  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  bool led;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Ultrasonic.h>
#include <PubSubClient.h>

//PROTOTYPING FUNCTIONS
void callback(char* topic, byte* payload, unsigned int length);
void reconnect();
void wave_led();
void pat_led();


Ultrasonic ultrasonic(13,14);
int distance;
bool wave = false;
bool pat = false;
#define RED_LED A1


WiFiClient wifiClient;
PubSubClient client(wifiClient);

const char broker[] = "broker.emqx.io";
int        port     = 1883;
const char subscribed_topic[]  = "SIT210/wave";

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(RED_LED, OUTPUT);
  digitalWrite(RED_LED, LOW);
}

void loop() {
  ArduinoCloud.update();
  digitalWrite(LED_BUILTIN, led);
  
  client.setServer(broker, port);
  client.setCallback(callback);

  distance = ultrasonic.read();
  
  Serial.print("Distance in CM: ");
  Serial.println(distance);

  if( distance < 20){
//tringer MQTT event
    pat = true;
    wave = false;
    if (!client.connected()) {
    reconnect();
    }
    client.subscribe(subscribed_topic);
    client.publish(subscribed_topic,"Gareth - pat");
    Serial.println("PUBLISHING SIT201 GARETH - PAT");
      
    delay(1000);

  }else if (distance < 50){
    wave = true;
    pat = false;
    //tringer MQTT event
    if (!client.connected()) {
    reconnect();
    }
    client.subscribe(subscribed_topic);
    client.publish(subscribed_topic,"Gareth - wave");
    Serial.println("PUBLISHING SIT201 GARETH WAVE");

    
    delay(1000);
  }

  client.loop();  //This loop(); maintains connection to MQTT Server and needs to be called reularly.  
  delay(1000);

}

/*
  Since Led is READ_WRITE variable, onLedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLedChange()  {
  Serial.print("Led status changed:");
  Serial.println(led);
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i=0;i<length;i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
  if(wave)
    wave_led();
  else
    pat_led();
}


void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    Serial.print(broker);
    Serial.print(" Port: ");
    Serial.println(port);
    // Attempt to connect
    if (client.connect("arduinoClient-GarethHS")) {
      Serial.println("connected");

      // Once connected, publish an announcement...

    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void pat_led(){
  //flash LED 3 times

      for(int i=0; i< 3;i++){
        digitalWrite(LED_BUILTIN,HIGH);
        digitalWrite(RED_LED,HIGH);
        Serial.print("LED FLASH ");
        delay(600);
        digitalWrite(LED_BUILTIN,LOW);
        digitalWrite(RED_LED,LOW);
        delay(600);
      }
  Serial.println();
}

void wave_led(){
  //flash LED 3 times

      for(int i=0; i< 10;i++){
        digitalWrite(LED_BUILTIN,HIGH);
        digitalWrite(RED_LED,HIGH);
        Serial.print("LED FLASH ");
        delay(100);
        digitalWrite(LED_BUILTIN,LOW);
        digitalWrite(RED_LED,LOW);
        delay(100);
      }
  Serial.println();
}
